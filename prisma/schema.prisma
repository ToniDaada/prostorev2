generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Creating PRODUCT model
// BackEnd Stuff
model Product {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String      @unique(map: "prodcut_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal     @default(0) @db.Decimal(12, 2)
  rating      Decimal     @default(0) @db.Decimal(3, 2)
  numReviews  Int         @default(0)
  isFeatured  Boolean     @default(false)
  banner      String?
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  OrderItem   OrderItem[]
}

//User model defines the user
model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String?   @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  Cart          Cart[]
  Order         Order[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@map("accounts")

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
  // @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//REASON WHY USER IS OPTIONAL User? in CART BUY NOT ORDER IS BEACASE YOU CANT BE MAKE AN ORDER AND NOT BE A USER BUT YOU CAN ADD TO CART

model Order {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String  @db.Uuid
  shippingAddress Json    @db.Json
  paymentMethod   String
  paymentResult   Json?   @db.Json
  itemsPrice      Decimal @db.Decimal(12, 2)
  shippingPrice   Decimal @db.Decimal(12, 2)
  taxPrice        Decimal @db.Decimal(12, 2)
  totalPrice      Decimal @db.Decimal(12, 2)
  isPaid          Boolean @default(false)
  isDelivered     Boolean @default(false)

  paidAt      DateTime? @db.Timestamp(6)
  deliveredAt DateTime? @db.Timestamp(6)
  createdAt   DateTime? @db.Timestamp(6)

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitems OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_product_pk")
}

// NOTE FOR ALL MODELS WE PUT THAT LAST LINE IS USED TO CREATE RELATIONSHIP BETWEEN THE MODELS AND THE USER MODEL, IF YOU NOTICED, THE USER MODEL HAS THE NAME OF THE MODELS IN IT
// also anytime you change the file ou have t run npx  prisma generate, then you create and run the migration, npx prisma migrate dev --name {name of migration}
